{"version":3,"sources":["services/ApiService.js","components/DCGrid.js","App.js","serviceWorker.js","index.js"],"names":["ApiService","getData","url","request","XMLHttpRequest","overrideMimeType","open","send","JSON","parse","responseText","DCGrid","props","state","isInit","ignoreFields","data","res","headers","Object","keys","counter","length","name","this","console","log","processColumnData","processRows","push","headerName","field","results","processData","rows","setState","assign","className","style","height","width","maxWidth","columnDefs","rowData","React","Component","App","apiService","id","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAUeA,E,sCATXC,QAAU,SAACC,GAEP,IAAIC,EAAU,IAAIC,eAIlB,OAHAD,EAAQE,iBAAiB,oBACzBF,EAAQG,KAAK,MAAOJ,GAAK,GACzBC,EAAQI,KAAK,MACNC,KAAKC,MAAMN,EAAQO,gB,6BCiEnBC,G,8DAlEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAGb,EAAKC,QAAS,EACd,EAAKC,aAAe,GANL,E,wDASPC,GAGR,IAFA,IAAIC,EAAM,GACNC,EAAUC,OAAOC,KAAKJ,GAClBK,EAAU,EAAGA,EAAUH,EAAQI,OAAQD,IAAW,CACtD,IAAIE,EAAOL,EAAQG,GACdE,KAAQC,KAAKT,eACdE,EAAIM,GAAQP,EAAKO,IAEzB,MAAO,CAACN,K,kCAGAD,GAIR,OAHAS,QAAQC,IAAIV,GAGL,CAAC,QAFMQ,KAAKG,kBAAkBX,GAET,KADjBQ,KAAKI,YAAYZ,M,wCAIdA,GAGd,IAFA,IAAIC,EAAM,GACNC,EAAUC,OAAOC,KAAKJ,GAClBK,EAAU,EAAGA,EAAUH,EAAQI,OAAQD,IAAW,CACtD,IAAIE,EAAOL,EAAQG,GACdE,KAAQC,KAAKT,cAClBE,EAAIY,KAAK,CAACC,WAAYP,EAAMQ,MAAOR,IAEvC,OAAON,I,+BAIP,IAAIO,KAAKV,OAAQ,CACbU,KAAKT,aAAeS,KAAKZ,MAAMG,aAC/B,IAAIiB,EAAUR,KAAKS,YAAYT,KAAKZ,MAAMI,MACtCE,EAAUc,EAAO,QACjBE,EAAOF,EAAO,KAGlB,OAFAR,KAAKW,SAAShB,OAAOiB,OAAO,GAAKZ,KAAKX,MAAO,CAAC,WAAaK,EAAS,QAAUgB,KAC9EV,KAAKV,QAAS,EACP,GAGX,OACI,yBACIuB,UAAU,kBACVC,MAAO,CACHC,OAAQ,QACRC,MAAO,OACPC,SAAU,SAEd,kBAAC,cAAD,CACIC,WAAYlB,KAAKX,MAAM6B,WACvBC,QAASnB,KAAKX,MAAM8B,e,GA5DnBC,IAAMC,YCiCZC,MAjCf,WACE,IACI7B,GADM,IAAI8B,GACA9C,QAAQ,wHAEtB,OACE,yBAAKqC,MAAO,GAAID,UAAU,OACtB,6BAASW,GAAG,UACR,yBAAKX,UAAU,SACX,gCACI,oDAMJ,gCACI,uBAAGY,KAAK,IAAIZ,UAAU,UAAtB,kBAIZ,yBAAKC,MAAO,CAAC,QAAU,OAAQ,iBAAiB,SAAU,cAAc,WAEhE,6BACA,2CACA,wBAAIA,MAAO,CAAE,MAAQ,SACrB,yBAAKA,MAAO,CAAC,YAAY,IAAK,MAAQ,QAClC,kBAAC,EAAD,CAAQtB,KAAMC,EAAKF,aAAc,CAAC,sDCnBlCmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.05092bcd.chunk.js","sourcesContent":["class ApiService{\n    getData = (url) => {\n\n        var request = new XMLHttpRequest()\n        request.overrideMimeType(\"application/json\")\n        request.open('GET', url, false)\n        request.send(null)\n        return JSON.parse(request.responseText)\n    }\n}\nexport default ApiService;","import React from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nclass DCGrid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n        this.isInit = false\n        this.ignoreFields = []\n    }\n\n    processRows(data) {\n        var res = {}\n        let headers = Object.keys(data)\n        for(let counter = 0; counter < headers.length; counter++) {\n            let name = headers[counter]\n            if(!(name in this.ignoreFields))\n                res[name] = data[name]\n        }\n        return [res]\n    }\n\n    processData(data) {\n        console.log(data)\n        var headers = this.processColumnData(data)\n        var rows = this.processRows(data)\n        return {'headers': headers, 'rows': rows}\n    }\n\n    processColumnData(data) {\n        var res = []\n        var headers = Object.keys(data)\n        for(let counter = 0; counter < headers.length; counter++) {\n            let name = headers[counter]\n            if(!(name in this.ignoreFields))\n            res.push({headerName: name, field: name})\n        }\n        return res\n    }\n\n    render() {\n        if(!this.isInit) {\n            this.ignoreFields = this.props.ignoreFields\n            var results = this.processData(this.props.data);\n            var headers = results['headers']\n            var rows = results['rows']\n            this.setState(Object.assign({},  this.state, {'columnDefs':headers, 'rowData':rows}))\n            this.isInit = true\n            return ''\n        }\n\n        return (\n            <div\n                className=\"ag-theme-alpine\"\n                style={{\n                    height: '250px',\n                    width: '100%',\n                    maxWidth: '100%'}}\n            >\n                <AgGridReact\n                    columnDefs={this.state.columnDefs}\n                    rowData={this.state.rowData}>\n                </AgGridReact>\n            </div>\n        );\n    }\n}\n\nexport default DCGrid;","import React from 'react';\nimport './App.css';\nimport apiService from \"./services/ApiService\"\nimport DCGrid from \"./components/DCGrid\"\n\nfunction App() {\n  var api = new apiService();\n  var res = api.getData('https://raw.githubusercontent.com/Sulstice/datacity/master/data/government_community_crime_map_incident_payload.json');\n  // var styles = {'display':'flex'};\n  return (\n    <div style={{}} className=\"App\">\n        <section id=\"banner\">\n            <div className=\"inner\">\n                <header>\n                    <h1>Welcome to DataCity</h1>\n                </header>\n\n                {/*<div className=\"flex \">*/}\n                {/*</div>*/}\n\n                <footer>\n                    <a href=\"#\" className=\"button\">Get Started</a>\n                </footer>\n            </div>\n        </section>\n        <div style={{'display':'flex', 'flex-direction':'column', 'align-items':'center'}}>\n\n                <br/>\n                <h2>Data Output</h2>\n                <hr style={{ 'width':'75%'}}/>\n                <div style={{'flex-grow':'1', 'width':'90%'}}>\n                    <DCGrid data={res} ignoreFields={['community_crime_map_missing_incident_numbers']} />\n                </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}